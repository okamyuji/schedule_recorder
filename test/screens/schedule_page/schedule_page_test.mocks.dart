// Mocks generated by Mockito 5.4.5 from annotations
// in schedule_recorder/test/screens/schedule_page/schedule_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i5;

import 'package:flutter_sound/flutter_sound.dart' as _i3;
import 'package:flutter_sound_platform_interface/flutter_sound_recorder_platform_interface.dart'
    as _i4;
import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FlutterSoundRecorder].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSoundRecorder extends _i1.Mock
    implements _i3.FlutterSoundRecorder {
  MockFlutterSoundRecorder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeLogger_0(this, Invocation.getter(#logger)),
          )
          as _i2.Logger);

  @override
  _i4.RecorderState get recorderState =>
      (super.noSuchMethod(
            Invocation.getter(#recorderState),
            returnValue: _i4.RecorderState.isStopped,
          )
          as _i4.RecorderState);

  @override
  bool get isRecording =>
      (super.noSuchMethod(Invocation.getter(#isRecording), returnValue: false)
          as bool);

  @override
  bool get isStopped =>
      (super.noSuchMethod(Invocation.getter(#isStopped), returnValue: false)
          as bool);

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  void setLogLevel(_i2.Level? aLevel) => super.noSuchMethod(
    Invocation.method(#setLogLevel, [aLevel]),
    returnValueForMissingStub: null,
  );

  @override
  void recordingData({_i5.Uint8List? data}) => super.noSuchMethod(
    Invocation.method(#recordingData, [], {#data: data}),
    returnValueForMissingStub: null,
  );

  @override
  void updateRecorderProgress({int? duration, double? dbPeakLevel}) =>
      super.noSuchMethod(
        Invocation.method(#updateRecorderProgress, [], {
          #duration: duration,
          #dbPeakLevel: dbPeakLevel,
        }),
        returnValueForMissingStub: null,
      );

  @override
  void openRecorderCompleted(int? state, bool? success) => super.noSuchMethod(
    Invocation.method(#openRecorderCompleted, [state, success]),
    returnValueForMissingStub: null,
  );

  @override
  void pauseRecorderCompleted(int? state, bool? success) => super.noSuchMethod(
    Invocation.method(#pauseRecorderCompleted, [state, success]),
    returnValueForMissingStub: null,
  );

  @override
  void resumeRecorderCompleted(int? state, bool? success) => super.noSuchMethod(
    Invocation.method(#resumeRecorderCompleted, [state, success]),
    returnValueForMissingStub: null,
  );

  @override
  void startRecorderCompleted(int? state, bool? success) => super.noSuchMethod(
    Invocation.method(#startRecorderCompleted, [state, success]),
    returnValueForMissingStub: null,
  );

  @override
  void stopRecorderCompleted(int? state, bool? success, String? url) =>
      super.noSuchMethod(
        Invocation.method(#stopRecorderCompleted, [state, success, url]),
        returnValueForMissingStub: null,
      );

  @override
  void log(_i2.Level? logLevel, String? msg) => super.noSuchMethod(
    Invocation.method(#log, [logLevel, msg]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i3.FlutterSoundRecorder?> openRecorder({
    dynamic isBGService = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#openRecorder, [], {#isBGService: isBGService}),
            returnValue: _i6.Future<_i3.FlutterSoundRecorder?>.value(),
          )
          as _i6.Future<_i3.FlutterSoundRecorder?>);

  @override
  _i6.Future<void> closeRecorder() =>
      (super.noSuchMethod(
            Invocation.method(#closeRecorder, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> isEncoderSupported(_i3.Codec? codec) =>
      (super.noSuchMethod(
            Invocation.method(#isEncoderSupported, [codec]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> setSubscriptionDuration(Duration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#setSubscriptionDuration, [duration]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> startRecorder({
    _i3.Codec? codec = _i3.Codec.defaultCodec,
    String? toFile,
    _i6.StreamSink<List<_i5.Float32List>>? toStreamFloat32,
    _i6.StreamSink<List<_i5.Int16List>>? toStreamInt16,
    _i6.StreamSink<_i5.Uint8List>? toStream,
    Duration? timeSlice = Duration.zero,
    int? sampleRate,
    int? numChannels = 1,
    int? bitRate = 16000,
    int? bufferSize = 8192,
    bool? enableVoiceProcessing = false,
    _i4.AudioSource? audioSource = _i4.AudioSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startRecorder, [], {
              #codec: codec,
              #toFile: toFile,
              #toStreamFloat32: toStreamFloat32,
              #toStreamInt16: toStreamInt16,
              #toStream: toStream,
              #timeSlice: timeSlice,
              #sampleRate: sampleRate,
              #numChannels: numChannels,
              #bitRate: bitRate,
              #bufferSize: bufferSize,
              #enableVoiceProcessing: enableVoiceProcessing,
              #audioSource: audioSource,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String?> stopRecorder() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecorder, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  void requestData() => super.noSuchMethod(
    Invocation.method(#requestData, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<int> getSampleRate() =>
      (super.noSuchMethod(
            Invocation.method(#getSampleRate, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<void> pauseRecorder() =>
      (super.noSuchMethod(
            Invocation.method(#pauseRecorder, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> resumeRecorder() =>
      (super.noSuchMethod(
            Invocation.method(#resumeRecorder, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool?> deleteRecord({required String? fileName}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRecord, [], {#fileName: fileName}),
            returnValue: _i6.Future<bool?>.value(),
          )
          as _i6.Future<bool?>);

  @override
  _i6.Future<String?> getRecordURL({required String? path}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecordURL, [], {#path: path}),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);
}

/// A class which mocks [FlutterSoundPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSoundPlayer extends _i1.Mock
    implements _i3.FlutterSoundPlayer {
  MockFlutterSoundPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get oldPosition =>
      (super.noSuchMethod(Invocation.getter(#oldPosition), returnValue: 0)
          as int);

  @override
  set oldPosition(int? _oldPosition) => super.noSuchMethod(
    Invocation.setter(#oldPosition, _oldPosition),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Logger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeLogger_0(this, Invocation.getter(#logger)),
          )
          as _i2.Logger);

  @override
  _i3.PlayerState get playerState =>
      (super.noSuchMethod(
            Invocation.getter(#playerState),
            returnValue: _i3.PlayerState.isStopped,
          )
          as _i3.PlayerState);

  @override
  bool get isPlaying =>
      (super.noSuchMethod(Invocation.getter(#isPlaying), returnValue: false)
          as bool);

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  bool get isStopped =>
      (super.noSuchMethod(Invocation.getter(#isStopped), returnValue: false)
          as bool);

  @override
  void setLogLevel(_i2.Level? aLevel) => super.noSuchMethod(
    Invocation.method(#setLogLevel, [aLevel]),
    returnValueForMissingStub: null,
  );

  @override
  void updateProgress({int? duration = 0, int? position = 0}) =>
      super.noSuchMethod(
        Invocation.method(#updateProgress, [], {
          #duration: duration,
          #position: position,
        }),
        returnValueForMissingStub: null,
      );

  @override
  void updatePlaybackState(int? state) => super.noSuchMethod(
    Invocation.method(#updatePlaybackState, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void needSomeFood(int? ln) => super.noSuchMethod(
    Invocation.method(#needSomeFood, [ln]),
    returnValueForMissingStub: null,
  );

  @override
  void audioPlayerFinished(int? state) => super.noSuchMethod(
    Invocation.method(#audioPlayerFinished, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void openPlayerCompleted(int? state, bool? success) => super.noSuchMethod(
    Invocation.method(#openPlayerCompleted, [state, success]),
    returnValueForMissingStub: null,
  );

  @override
  void pausePlayerCompleted(int? state, bool? success) => super.noSuchMethod(
    Invocation.method(#pausePlayerCompleted, [state, success]),
    returnValueForMissingStub: null,
  );

  @override
  void resumePlayerCompleted(int? state, bool? success) => super.noSuchMethod(
    Invocation.method(#resumePlayerCompleted, [state, success]),
    returnValueForMissingStub: null,
  );

  @override
  void startPlayerCompleted(int? state, bool? success, int? duration) =>
      super.noSuchMethod(
        Invocation.method(#startPlayerCompleted, [state, success, duration]),
        returnValueForMissingStub: null,
      );

  @override
  void stopPlayerCompleted(int? state, bool? success) => super.noSuchMethod(
    Invocation.method(#stopPlayerCompleted, [state, success]),
    returnValueForMissingStub: null,
  );

  @override
  void log(_i2.Level? logLevel, String? msg) => super.noSuchMethod(
    Invocation.method(#log, [logLevel, msg]),
    returnValueForMissingStub: null,
  );

  @override
  bool isOpen() =>
      (super.noSuchMethod(Invocation.method(#isOpen, []), returnValue: false)
          as bool);

  @override
  _i6.Future<_i3.FlutterSoundPlayer?> openPlayer({
    dynamic isBGService = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#openPlayer, [], {#isBGService: isBGService}),
            returnValue: _i6.Future<_i3.FlutterSoundPlayer?>.value(),
          )
          as _i6.Future<_i3.FlutterSoundPlayer?>);

  @override
  _i6.Future<void> closePlayer() =>
      (super.noSuchMethod(
            Invocation.method(#closePlayer, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i3.PlayerState> getPlayerState() =>
      (super.noSuchMethod(
            Invocation.method(#getPlayerState, []),
            returnValue: _i6.Future<_i3.PlayerState>.value(
              _i3.PlayerState.isStopped,
            ),
          )
          as _i6.Future<_i3.PlayerState>);

  @override
  _i6.Future<Map<String, Duration>> getProgress() =>
      (super.noSuchMethod(
            Invocation.method(#getProgress, []),
            returnValue: _i6.Future<Map<String, Duration>>.value(
              <String, Duration>{},
            ),
          )
          as _i6.Future<Map<String, Duration>>);

  @override
  _i6.Future<bool> isDecoderSupported(_i3.Codec? codec) =>
      (super.noSuchMethod(
            Invocation.method(#isDecoderSupported, [codec]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> setSubscriptionDuration(Duration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#setSubscriptionDuration, [duration]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Duration?> startPlayer({
    String? fromURI,
    _i5.Uint8List? fromDataBuffer,
    _i3.Codec? codec = _i3.Codec.aacADTS,
    int? sampleRate = 16000,
    int? numChannels = 1,
    _i3.TWhenFinished? whenFinished,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startPlayer, [], {
              #fromURI: fromURI,
              #fromDataBuffer: fromDataBuffer,
              #codec: codec,
              #sampleRate: sampleRate,
              #numChannels: numChannels,
              #whenFinished: whenFinished,
            }),
            returnValue: _i6.Future<Duration?>.value(),
          )
          as _i6.Future<Duration?>);

  @override
  _i6.Future<void> startPlayerFromMic({
    int? sampleRate = 44000,
    int? numChannels = 1,
    int? bufferSize = 8192,
    dynamic enableVoiceProcessing = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startPlayerFromMic, [], {
              #sampleRate: sampleRate,
              #numChannels: numChannels,
              #bufferSize: bufferSize,
              #enableVoiceProcessing: enableVoiceProcessing,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> startPlayerFromStream({
    _i3.Codec? codec = _i3.Codec.pcm16,
    int? numChannels = 1,
    int? sampleRate = 16000,
    int? bufferSize = 8192,
    _i3.TWhenFinished? whenFinished,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startPlayerFromStream, [], {
              #codec: codec,
              #numChannels: numChannels,
              #sampleRate: sampleRate,
              #bufferSize: bufferSize,
              #whenFinished: whenFinished,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> feedFromStream(_i5.Uint8List? buffer) =>
      (super.noSuchMethod(
            Invocation.method(#feedFromStream, [buffer]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> stopPlayer() =>
      (super.noSuchMethod(
            Invocation.method(#stopPlayer, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> pausePlayer() =>
      (super.noSuchMethod(
            Invocation.method(#pausePlayer, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> resumePlayer() =>
      (super.noSuchMethod(
            Invocation.method(#resumePlayer, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> seekToPlayer(Duration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#seekToPlayer, [duration]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setVolume(double? volume) =>
      (super.noSuchMethod(
            Invocation.method(#setVolume, [volume]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setVolumePan(double? volume, double? pan) =>
      (super.noSuchMethod(
            Invocation.method(#setVolumePan, [volume, pan]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setSpeed(double? speed) =>
      (super.noSuchMethod(
            Invocation.method(#setSpeed, [speed]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String?> getResourcePath() =>
      (super.noSuchMethod(
            Invocation.method(#getResourcePath, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);
}
